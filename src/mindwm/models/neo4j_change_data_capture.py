# coding: utf-8

"""
    Mindwm API

    This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from MindWM.models.neo4j_change_data_capture_meta import Neo4jChangeDataCaptureMeta
from MindWM.models.neo4j_change_data_capture_payload import Neo4jChangeDataCapturePayload
from MindWM.models.neo4j_change_data_capture_schema import Neo4jChangeDataCaptureSchema
from typing import Optional, Set
from typing_extensions import Self

class Neo4jChangeDataCapture(BaseModel):
    """
    Neo4jChangeDataCapture
    """ # noqa: E501
    headers: Dict[str, Any]
    message_key: StrictStr
    meta: Neo4jChangeDataCaptureMeta
    offset: StrictInt
    partition: StrictInt
    source_type: StrictStr
    timestamp: datetime
    topic: StrictStr
    var_schema: Neo4jChangeDataCaptureSchema = Field(alias="schema")
    payload: Neo4jChangeDataCapturePayload
    __properties: ClassVar[List[str]] = ["headers", "message_key", "meta", "offset", "partition", "source_type", "timestamp", "topic", "schema", "payload"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Neo4jChangeDataCapture from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of meta
        if self.meta:
            _dict['meta'] = self.meta.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_schema
        if self.var_schema:
            _dict['schema'] = self.var_schema.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payload
        if self.payload:
            _dict['payload'] = self.payload.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Neo4jChangeDataCapture from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "headers": obj.get("headers"),
            "message_key": obj.get("message_key"),
            "meta": Neo4jChangeDataCaptureMeta.from_dict(obj["meta"]) if obj.get("meta") is not None else None,
            "offset": obj.get("offset"),
            "partition": obj.get("partition"),
            "source_type": obj.get("source_type"),
            "timestamp": obj.get("timestamp"),
            "topic": obj.get("topic"),
            "schema": Neo4jChangeDataCaptureSchema.from_dict(obj["schema"]) if obj.get("schema") is not None else None,
            "payload": Neo4jChangeDataCapturePayload.from_dict(obj["payload"]) if obj.get("payload") is not None else None
        })
        return _obj


